/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.odb.derelict.editor;

import br.odb.utils.math.Vec2;
import br.odb.utils.math.Vec3;
import javax.swing.JOptionPane;

/**
 *
 * @author monty
 */
public class MapViewInternalForm extends javax.swing.JInternalFrame implements LevelEditorContextListener {

    EditorContext editContext;
    SwingWorldRenderer[] renderer;
    private final LevelEditorContextListener secundaryListener;
    /**
     * Creates new form MapViewInternalForm
     */
    public MapViewInternalForm( LevelEditorContextListener listener ) {
        super("Map View",true,true,true,true);
        
        initComponents();
        resetWindowProperties();
        
        secundaryListener = listener;
        editContext = new EditorContext( this );
        editContext.createNew();
        
        setCursorInTheMiddle();        

        renderer = new SwingWorldRenderer[ 3 ];
        renderer[ 0 ] = new WorldXZRenderer( mapPane );
        renderer[ 1 ] = new WorldXYRenderer(mapPane);
        renderer[ 2 ] = new WorldIso3DRenderer(mapPane);
        
        int zoom =  ((Integer) spnZoom.getValue()).intValue() ;
        broadcastZoom( zoom );
        mapPane.setContext( editContext );
        mapPane.setRenderer( renderer[ this.cmbViewMode.getSelectedIndex() ] );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbViewMode = new javax.swing.JComboBox();
        chkSolid = new javax.swing.JCheckBox();
        spnZoom = new javax.swing.JSpinner();
        scrollPane = new javax.swing.JScrollPane();
        mapPane = new br.odb.derelict.editor.MapViewPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbAlternativeBehaviour = new javax.swing.JComboBox();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        cmbViewMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XZ View", "XY View", "Iso3D View" }));
        cmbViewMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbViewModeActionPerformed(evt);
            }
        });
        cmbViewMode.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbViewModePropertyChange(evt);
            }
        });

        chkSolid.setSelected(true);
        chkSolid.setText("draw as solid?");
        chkSolid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSolidActionPerformed(evt);
            }
        });
        chkSolid.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                chkSolidVetoableChange(evt);
            }
        });

        spnZoom.setModel(new javax.swing.SpinnerNumberModel(2, 1, 1024, 1));
        spnZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnZoomStateChanged(evt);
            }
        });
        spnZoom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                spnZoomPropertyChange(evt);
            }
        });

        scrollPane.setPreferredSize(new java.awt.Dimension(512, 512));
        scrollPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                scrollPaneComponentMoved(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                scrollPaneComponentShown(evt);
            }
        });

        mapPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapPaneMouseClicked(evt);
            }
        });
        mapPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mapPaneMouseDragged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout mapPaneLayout = new org.jdesktop.layout.GroupLayout(mapPane);
        mapPane.setLayout(mapPaneLayout);
        mapPaneLayout.setHorizontalGroup(
            mapPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 671, Short.MAX_VALUE)
        );
        mapPaneLayout.setVerticalGroup(
            mapPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 580, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(mapPane);

        jLabel1.setText("Zoom:");

        cmbAlternativeBehaviour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alt-click moves", "Alt-click resizes" }));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(cmbViewMode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chkSolid)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmbAlternativeBehaviour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .add(1, 1, 1)
                .add(spnZoom, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(spnZoom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(chkSolid)
                    .add(cmbViewMode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbAlternativeBehaviour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkSolidVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_chkSolidVetoableChange
        JOptionPane.showMessageDialog(null, "Hello World!", "Message", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_chkSolidVetoableChange

    private void chkSolidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSolidActionPerformed
        this.mapPane.renderer.toggleSolid();        
        this.mapPane.repaint();
    }//GEN-LAST:event_chkSolidActionPerformed

    private void spnZoomPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_spnZoomPropertyChange
        int zoom =  ((Integer) spnZoom.getValue()).intValue() ;
        broadcastZoom( zoom );        
    }//GEN-LAST:event_spnZoomPropertyChange

    private void scrollPaneComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollPaneComponentMoved
        invalidate();
    }//GEN-LAST:event_scrollPaneComponentMoved

    private void scrollPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollPaneComponentShown
        repaint();
    }//GEN-LAST:event_scrollPaneComponentShown

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void mapPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPaneMouseClicked
        Vec3 pointInSpace = renderer[ this.cmbViewMode.getSelectedIndex()].getVec3for(new Vec2(evt.getX(), evt.getY()));
        editContext.getCursor().setProtectNaN(pointInSpace);

        if (evt.getButton() == 1) {
            editContext.trySelectingSectorFromCursor();

            secundaryListener.setCurrentSector( editContext.getCurrentSector().getId() );

        } else {

            int behaviour = this.cmbAlternativeBehaviour.getSelectedIndex() + 2;

            if ((evt.getButton()) != behaviour) {
                editContext.moveCurrentSectorTo();
            } else {
                editContext.resizeCurrentSectorTo();
            }
        }

        mapPane.repaint();
    }//GEN-LAST:event_mapPaneMouseClicked

    private void cmbViewModePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbViewModePropertyChange

    }//GEN-LAST:event_cmbViewModePropertyChange

    private void cmbViewModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbViewModeActionPerformed
        mapPane.setRenderer( renderer[ this.cmbViewMode.getSelectedIndex() ] );
        mapPane.repaint();
    }//GEN-LAST:event_cmbViewModeActionPerformed

    private void spnZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnZoomStateChanged
        int zoom =  ((Integer) spnZoom.getValue()).intValue() ;
        mapPane.setZoom( zoom );
        mapPane.repaint();
    }//GEN-LAST:event_spnZoomStateChanged

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        editContext.terminate();
    }//GEN-LAST:event_formInternalFrameClosing

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        secundaryListener.contextModified( editContext );
    }//GEN-LAST:event_formFocusGained

    private void mapPaneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPaneMouseDragged
        //System.out.println( "dragged " + evt.getX() + ", " + evt.getY() );
    }//GEN-LAST:event_mapPaneMouseDragged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkSolid;
    private javax.swing.JComboBox cmbAlternativeBehaviour;
    private javax.swing.JComboBox cmbViewMode;
    private javax.swing.JLabel jLabel1;
    private br.odb.derelict.editor.MapViewPanel mapPane;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSpinner spnZoom;
    // End of variables declaration//GEN-END:variables

    @Override
    public void contextModified( EditorContext context ) {
        secundaryListener.contextModified( context );
        mapPane.resetSize();
        mapPane.repaint();
        this.setTitle( ( context.getCurrentFilename() == null ? "Untitled" : context.getCurrentFilename() ) + ( context.isCommitNeeded() ? " [ unsaved changes ]" : "" ));
    }
    
    public void updateWidgets() {
        
    }

    EditorContext getContext() {
        return editContext;
    }

    @Override
    public void setCurrentSector(int id) {
        repaint();
    }

    @Override
    public void willTerminateContext(EditorContext context) {
        secundaryListener.willTerminateContext( context );
    }

    private void setCursorInTheMiddle() {
        editContext.getCursor().set(128, 128, 128);
    }

    private void resetWindowProperties() {
        setSize( 255, 255 );
        setLocation(50, 50);
    }

    private void broadcastZoom(int zoom) {
        renderer[ 0 ].setZoom( zoom );        
        renderer[ 1 ].setZoom( zoom );
        renderer[ 2 ].setZoom( zoom );        
        mapPane.setZoom( zoom );
        mapPane.repaint();
    }
}
